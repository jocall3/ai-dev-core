// Copyright James Burvel Oâ€™Callaghan III
// President Citibank Demo Business Inc.

import React, { useState, useCallback } from 'react';
import { generateImage } from '../services/index.ts';
import { ImageGeneratorIcon, SparklesIcon, ArrowDownTrayIcon } from './icons.tsx';
import { LoadingSpinner } from './shared/index.tsx';

const surprisePrompts = [
    'A majestic lion wearing a crown, painted in the style of Van Gogh.',
    'A futuristic cityscape on another planet with two moons in the sky.',
    'A cozy, magical library inside a giant tree.',
    'A surreal image of a ship sailing on a sea of clouds.',
    'An astronaut riding a space-themed bicycle on the moon.',
];

export const AiImageGenerator: React.FC = () => {
    const [prompt, setPrompt] = useState<string>('A photorealistic image of a futuristic city at sunset, with flying cars.');
    const [imageUrl, setImageUrl] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string>('');

    const handleGenerate = useCallback(async () => {
        if (!prompt.trim()) {
            setError('Please enter a prompt to generate an image.');
            return;
        }
        setIsLoading(true);
        setError('');
        setImageUrl(null);
        try {
            const resultUrl = await generateImage(prompt);
            setImageUrl(resultUrl);
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
            setError(`Failed to generate image: ${errorMessage}`);
        } finally {
            setIsLoading(false);
        }
    }, [prompt]);

    const handleSurpriseMe = () => {
        const randomPrompt = surprisePrompts[Math.floor(Math.random() * surprisePrompts.length)];
        setPrompt(randomPrompt);
    };
    
    const handleDownload = () => {
        if (!imageUrl) return;
        const link = document.createElement('a');
        link.href = imageUrl;
        link.download = `${prompt.slice(0, 30).replace(/\s/g, '_')}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    return (
        <div className="h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary">
            <header className="mb-6">
                <h1 className="text-3xl font-bold flex items-center">
                    <ImageGeneratorIcon />
                    <span className="ml-3">AI Image Generator</span>
                </h1>
                <p className="text-text-secondary mt-1">Generate stunning, high-quality images from text prompts using Imagen 3.</p>
            </header>
            
            <div className="flex flex-col gap-4 mb-4">
                <label htmlFor="prompt-input" className="text-sm font-medium text-text-secondary">Your Prompt</label>
                <textarea
                    id="prompt-input"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="e.g., A cute cat wearing a wizard hat"
                    className="w-full p-3 rounded-md bg-surface border border-border focus:ring-2 focus:ring-primary focus:outline-none resize-y"
                    rows={3}
                />
                <div className="flex gap-2">
                    <button
                        onClick={handleGenerate}
                        disabled={isLoading}
                        className="btn-primary w-full flex items-center justify-center px-6 py-3"
                    >
                        {isLoading ? <LoadingSpinner /> : 'Generate Image'}
                    </button>
                    <button
                        onClick={handleSurpriseMe}
                        disabled={isLoading}
                        className="px-4 py-3 bg-surface border border-border rounded-md hover:bg-gray-100 transition-colors"
                        title="Surprise Me!"
                    >
                        <SparklesIcon />
                    </button>
                </div>
            </div>

            <div className="flex-grow flex items-center justify-center bg-background border-2 border-dashed border-border rounded-lg p-4 relative overflow-auto">
                {isLoading && <LoadingSpinner />}
                {error && <p className="text-red-500 text-center">{error}</p>}
                {imageUrl && !isLoading && (
                    <>
                        <img src={imageUrl} alt={prompt || "Generated by AI"} className="max-w-full max-h-full object-contain rounded-md shadow-lg" />
                        <button 
                          onClick={handleDownload}
                          className="absolute top-4 right-4 p-2 bg-black/30 text-white rounded-full hover:bg-black/50 backdrop-blur-sm"
                          title="Download Image"
                        >
                            <ArrowDownTrayIcon />
                        </button>
                    </>
                )}
                {!isLoading && !imageUrl && !error && (
                    <div className="text-center text-text-secondary">
                        <p>Your generated image will appear here.</p>
                    </div>
                )}
            </div>
        </div>
    );
};
import React from 'react';
import type { Feature } from '../types.ts';
import { RAW_FEATURES } from './manifest.ts';
import { lazyWithRetry } from '../services/index.ts';

// Map feature IDs to their components using lazy loading with retry logic
const componentMap: Record<string, React.FC<any>> = {
    'ai-command-center': lazyWithRetry(() => import('./AiCommandCenter.tsx'), 'AiCommandCenter'),
    'ai-code-explainer': lazyWithRetry(() => import('./AiCodeExplainer.tsx'), 'AiCodeExplainer'),
    'ai-feature-builder': lazyWithRetry(() => import('./AiFeatureBuilder.tsx'), 'AiFeatureBuilder'),
    'regex-sandbox': lazyWithRetry(() => import('./RegexSandbox.tsx'), 'RegexSandbox'),
    'portable-snippet-vault': lazyWithRetry(() => import('./SnippetVault.tsx'), 'SnippetVault'),
    'css-grid-editor': lazyWithRetry(() => import('./CssGridEditor.tsx'), 'CssGridEditor'),
    'json-tree-navigator': lazyWithRetry(() => import('./JsonTreeNavigator.tsx'), 'JsonTreeNavigator'),
    'xbrl-converter': lazyWithRetry(() => import('./XbrlConverter.tsx'), 'XbrlConverter'),
    'ai-unit-test-generator': lazyWithRetry(() => import('./AiUnitTestGenerator.tsx'), 'AiUnitTestGenerator'),
    'prompt-craft-pad': lazyWithRetry(() => import('./PromptCraftPad.tsx'), 'PromptCraftPad'),
    'linter-formatter': lazyWithRetry(() => import('./CodeFormatter.tsx'), 'CodeFormatter'),
    'schema-designer': lazyWithRetry(() => import('./SchemaDesigner.tsx'), 'SchemaDesigner'),
    'pwa-manifest-editor': lazyWithRetry(() => import('./PwaManifestEditor.tsx'), 'PwaManifestEditor'),
    'markdown-slides-generator': lazyWithRetry(() => import('./MarkdownSlides.tsx'), 'MarkdownSlides'),
    'screenshot-to-component': lazyWithRetry(() => import('./ScreenshotToComponent.tsx'), 'ScreenshotToComponent'),
    'digital-whiteboard': lazyWithRetry(() => import('./DigitalWhiteboard.tsx'), 'DigitalWhiteboard'),
    'theme-designer': lazyWithRetry(() => import('./ThemeDesigner.tsx'), 'ThemeDesigner'),
    'svg-path-editor': lazyWithRetry(() => import('./SvgPathEditor.tsx'), 'SvgPathEditor'),
    'ai-style-transfer': lazyWithRetry(() => import('./AiStyleTransfer.tsx'), 'AiStyleTransfer'),
    'ai-coding-challenge': lazyWithRetry(() => import('./AiCodingChallenge.tsx'), 'AiCodingChallenge'),
    'typography-lab': lazyWithRetry(() => import('./TypographyLab.tsx'), 'TypographyLab'),
    'code-review-bot': lazyWithRetry(() => import('./CodeReviewBot.tsx'), 'CodeReviewBot'),
    'cron-job-builder': lazyWithRetry(() => import('./CronJobBuilder.tsx'), 'CronJobBuilder'),
    'ai-code-migrator': lazyWithRetry(() => import('./AiCodeMigrator.tsx'), 'AiCodeMigrator'),
    'worker-thread-debugger': lazyWithRetry(() => import('./WorkerThreadDebugger.tsx'), 'WorkerThreadDebugger'),
    'ai-image-generator': lazyWithRetry(() => import('./AiImageGenerator.tsx'), 'AiImageGenerator'),
    'async-call-tree-viewer': lazyWithRetry(() => import('./AsyncCallTreeViewer.tsx'), 'AsyncCallTreeViewer'),
    'audio-to-code': lazyWithRetry(() => import('./AudioToCode.tsx'), 'AudioToCode'),
    'code-spell-checker': lazyWithRetry(() => import('./CodeSpellChecker.tsx'), 'CodeSpellChecker'),
    'color-palette-generator': lazyWithRetry(() => import('./ColorPaletteGenerator.tsx'), 'ColorPaletteGenerator'),
    'logic-flow-builder': lazyWithRetry(() => import('./LogicFlowBuilder.tsx'), 'LogicFlowBuilder'),
    'meta-tag-editor': lazyWithRetry(() => import('./MetaTagEditor.tsx'), 'MetaTagEditor'),
    'network-visualizer': lazyWithRetry(() => import('./NetworkVisualizer.tsx'), 'NetworkVisualizer'),
    'responsive-tester': lazyWithRetry(() => import('./ResponsiveTester.tsx'), 'ResponsiveTester'),
    'sass-scss-compiler': lazyWithRetry(() => import('./SassScssCompiler.tsx'), 'SassScssCompiler'),
};

// Map feature IDs to specific AI configurations
const aiConfigMap: Record<string, Feature['aiConfig']> = {
    'ai-code-explainer': { model: 'gemini-2.5-flash' },
    'ai-feature-builder': { model: 'gemini-2.5-flash' },
    'ai-unit-test-generator': { model: 'gemini-2.5-flash' },
    'regex-sandbox': { model: 'gemini-2.5-flash' },
    'screenshot-to-component': { model: 'gemini-2.5-flash' },
    'theme-designer': { model: 'gemini-2.5-flash' },
    'ai-style-transfer': { model: 'gemini-2.5-flash' },
    'ai-coding-challenge': { model: 'gemini-2.5-flash' },
    'code-review-bot': { model: 'gemini-2.5-flash' },
    'ai-code-migrator': { model: 'gemini-2.5-flash' },
    'worker-thread-debugger': { model: 'gemini-2.5-flash' },
    'ai-command-center': { model: 'gemini-2.5-flash' },
    'ai-image-generator': { model: 'imagen-3.0-generate-002' },
    'audio-to-code': { model: 'gemini-2.5-flash' },
    'color-palette-generator': { model: 'gemini-2.5-flash' },
    'xbrl-converter': { model: 'gemini-2.5-flash' },
    'digital-whiteboard': { model: 'gemini-2.5-flash' },
    'code-to-flowchart': { model: 'gemini-2.5-flash' },
    'mock-data-generator': { model: 'gemini-2.5-flash' },
    'dockerfile-generator': { model: 'gemini-2.5-flash' },
    'ci-cd-generator': { model: 'gemini-2.5-flash' },
    'user-story-generator': { model: 'gemini-2.5-flash' },
    'cloud-cost-estimator': { model: 'gemini-2.5-flash' },
    'api-docs-generator': { model: 'gemini-2.5-flash' },
    'system-design-planner': { model: 'gemini-2.5-flash' },
    'database-query-generator': { model: 'gemini-2.5-flash' },
    'security-vulnerability-scanner': { model: 'gemini-2.5-flash' },
    'interview-prep-kit': { model: 'gemini-2.5-flash' },
    'ai-tech-blog-writer': { model: 'gemini-2.5-flash' },
    'project-timeline-generator': { model: 'gemini-2.5-flash' },
    'design-pattern-suggester': { model: 'gemini-2.5-flash' },
    'landing-page-generator': { model: 'gemini-2.5-flash' },
    'code-comment-generator': { model: 'gemini-2.5-flash' },
    'error-message-explainer': { model: 'gemini-2.5-flash' },
    'release-notes-generator': { model: 'gemini-2.5-flash' },
    'dependency-update-suggester': { model: 'gemini-2.5-flash' },
    'code-snippet-to-api': { model: 'gemini-2.5-flash' },
    'api-sdk-generator': { model: 'gemini-2.5-flash' },
    'logo-generator': { model: 'imagen-3.0-generate-002' },
    'product-roadmap-generator': { model: 'gemini-2.5-flash' },
    'customer-support-bot-builder': { model: 'gemini-2.5-flash' },
    'code-documentation-generator': { model: 'gemini-2.5-flash' },
    'terraform-config-generator': { model: 'gemini-2.5-flash' },
    'kubernetes-manifest-generator': { model: 'gemini-2.5-flash' },
};

export const ALL_FEATURES: Feature[] = RAW_FEATURES.map(feature => ({
    ...feature,
    component: componentMap[feature.id] || (() => React.createElement('div', null, `Component for ${feature.name} not found.`)),
    aiConfig: aiConfigMap[feature.id],
}));

export const FEATURES_MAP = new Map(ALL_FEATURES.map(f => [f.id, f]));